using System;
using System.Collections.Generic;
using System.Linq;
using GTA;
using GTA.Native;
using NativeUI;

namespace SimpleAmmoManager
{
    public abstract class Menu
    {
        private static List<WeaponGroup> checkedWeaponGroupList = new List<WeaponGroup>();
        private static readonly List<WeaponGroup> fullWeaponGroupList = new List<WeaponGroup>
        {
            WeaponGroup.AssaultRifle,
            // WeaponGroup.DigiScanner,
            // WeaponGroup.FireExtinguisher,
            WeaponGroup.Heavy,
            // WeaponGroup.Melee,
            WeaponGroup.MG,
            // WeaponGroup.NightVision,
            // WeaponGroup.Parachute,
            // WeaponGroup.PetrolCan,
            WeaponGroup.Pistol,
            WeaponGroup.Shotgun,
            WeaponGroup.SMG,
            WeaponGroup.Sniper,
            // WeaponGroup.Stungun,
            WeaponGroup.Thrown,
            // WeaponGroup.Unarmed
        };

        public static MenuPool menuPool = new MenuPool();

        // Creating Menus
        public static UIMenu mainMenu = new UIMenu("Ammo Manager", "Select Group, then \"Ammo Options\"");
        private static UIMenu ammoOptions;
        private static UIMenu aboutMod;

        // Creating Menu Items

        // Main Menu
        private static UIMenuCheckboxItem allweaponsCbox = new UIMenuCheckboxItem("All Weapons", false);
        private static UIMenuCheckboxItem equippedweaponCBox = new UIMenuCheckboxItem("Equipped Weapon", false);
        private static UIMenuCheckboxItem handgunCBox = new UIMenuCheckboxItem("Handguns", false);
        private static UIMenuCheckboxItem machinegunCBox = new UIMenuCheckboxItem("Machine Guns", false);
        private static UIMenuCheckboxItem assaultrifleCBox = new UIMenuCheckboxItem("Assault Rifles", false);
        private static UIMenuCheckboxItem sniperrifleCBox = new UIMenuCheckboxItem("Sniper Rifles", false);
        private static UIMenuCheckboxItem shotgunCBox = new UIMenuCheckboxItem("Shotguns", false);
        private static UIMenuCheckboxItem heavyweaponCBox = new UIMenuCheckboxItem("Heavy Weapons", false);
        private static UIMenuCheckboxItem throwablesCBox = new UIMenuCheckboxItem("Throwables", false);

        private static List<UIMenuCheckboxItem> menuItemList = new List<UIMenuCheckboxItem>
        {
            allweaponsCbox,
            equippedweaponCBox,
            handgunCBox,
            machinegunCBox,
            assaultrifleCBox,
            sniperrifleCBox,
            shotgunCBox,
            heavyweaponCBox,
            throwablesCBox
        };

        // Ammo Options
        private static UIMenuItem maxAmmo = new UIMenuItem("Max Ammo");
        private static UIMenuItem emptyAmmo = new UIMenuItem("Empty Ammo");
        private static UIMenuItem setAmmo = new UIMenuItem("Set Ammo", "Enter amount [0-9999]");
        private static List<UIMenuItem> ammoOptionsItemList = new List<UIMenuItem>
        {
            maxAmmo,
            emptyAmmo,
            setAmmo
        };

        // About Mod
        private static UIMenuItem author = new UIMenuItem("Author:");
        private static UIMenuItem version = new UIMenuItem("Version:");
        private static List<UIMenuItem> aboutModItemList = new List<UIMenuItem>
        {
            author,
            version
        };

        public static void initializeMenu()
        {
            createMenuItems();

            // Main Menu
            mainMenu.Title.Outline = true;
            mainMenu.Title.DropShadow = true;

            // Ammo Options
            ammoOptions.Title.Outline = true;
            ammoOptions.Title.DropShadow = true;

            // About Mod
            aboutMod.Title.Outline = true;
            aboutMod.Title.DropShadow = true;
            author.SetRightLabel("matchaicedtea");
            version.SetRightLabel("v1.0.0");
        }

        // Add Menu Items
        private static void createMenuItems()
        {
            // Main Menu
            menuPool.Add(mainMenu);
            foreach (UIMenuItem menuItem in menuItemList)
            {
                mainMenu.AddItem(menuItem);
            }

            // Ammo Options
            ammoOptions = menuPool.AddSubMenu(mainMenu, "Ammo Options");
            foreach (UIMenuItem ammoOptionsItem in ammoOptionsItemList)
            {
                ammoOptions.AddItem(ammoOptionsItem);
            }

            // About Mod
            aboutMod = menuPool.AddSubMenu(mainMenu, "About Mod");
            foreach (UIMenuItem aboutModItem in aboutModItemList)
            {
                aboutMod.AddItem(aboutModItem);
            }

            mainMenu.RefreshIndex();
        }

        // Listens for menu selections
        public static void listener()
        {
            ammoOptions.OnItemSelect += (sender, item, index) =>
            {

                switch (item.Text)
                {
                    case "Max Ammo":
                        setAmmoAmount(9999);
                        break;
                    case "Empty Ammo":
                        setAmmoAmount(0);
                        break;
                    case "Set Ammo":
                        string input = Game.GetUserInput(WindowTitle.EnterSynopsis, $"{Main.setAmmoDefaultAmt}", 3);
                        if (Int16.TryParse(input, out short amt))
                        {
                            setAmmoAmount(amt);
                            Audio.PlaySoundFrontend("WEAPON_AMMO_PURCHASE", "HUD_AMMO_SHOP_SOUNDSET");
                        }

                        else
                        {
                            int inputErr = GTA.UI.Notification.Show(GTA.UI.NotificationIcon.Blocked, "AmmoManager", "Invalid Input", "Numerical input only.", true, true);
                            Audio.PlaySoundFrontend("ERROR", "HUD_FRONTEND_DEFAULT_SOUNDSET");
                        }
                        break;
                }
            };

            mainMenu.OnCheckboxChange += (sender, item, checked_) =>
            {
                // Disable other items if all weapons is checked
                if (item.Text == allweaponsCbox.Text)
                {
                    foreach (UIMenuCheckboxItem cboxItem in menuItemList)
                    {
                        if (cboxItem == allweaponsCbox)
                            continue;
                        cboxItem.Enabled = !allweaponsCbox.Checked;
                        cboxItem.Checked = false;
                    }
                }

                if (checked_)
                {
                    foreach (UIMenuCheckboxItem cboxItem in menuItemList)
                    {
                        if (item == allweaponsCbox) checkedWeaponGroupList.AddRange(fullWeaponGroupList);
                        else if (item == equippedweaponCBox) checkedWeaponGroupList.Add(Function.Call<WeaponGroup>(Hash.GET_WEAPONTYPE_GROUP, Function.Call<Hash>(Hash.GET_SELECTED_PED_WEAPON, Game.Player.Character)));
                        else if (item == handgunCBox) checkedWeaponGroupList.Add(WeaponGroup.Pistol);
                        else if (item == machinegunCBox)
                        {
                            checkedWeaponGroupList.Add(WeaponGroup.MG);
                            checkedWeaponGroupList.Add(WeaponGroup.SMG);
                        }
                        else if (item == assaultrifleCBox) checkedWeaponGroupList.Add(WeaponGroup.AssaultRifle);
                        else if (item == sniperrifleCBox) checkedWeaponGroupList.Add(WeaponGroup.Sniper);
                        else if (item == shotgunCBox) checkedWeaponGroupList.Add(WeaponGroup.Shotgun);
                        else if (item == heavyweaponCBox) checkedWeaponGroupList.Add(WeaponGroup.Heavy);
                        else if (item == throwablesCBox) checkedWeaponGroupList.Add(WeaponGroup.Thrown);
                    }

                }
                else
                {
                    foreach (UIMenuCheckboxItem cboxItem in menuItemList)
                    {
                        if (item == allweaponsCbox) checkedWeaponGroupList.Clear();
                        else if (item == equippedweaponCBox) checkedWeaponGroupList.Remove(Function.Call<WeaponGroup>(Hash.GET_WEAPONTYPE_GROUP, Function.Call<Hash>(Hash.GET_SELECTED_PED_WEAPON, Game.Player.Character)));
                        else if (item == handgunCBox) checkedWeaponGroupList.Remove(WeaponGroup.Pistol);
                        else if (item == machinegunCBox)
                        {
                            checkedWeaponGroupList.Remove(WeaponGroup.MG);
                            checkedWeaponGroupList.Remove(WeaponGroup.SMG);
                        }
                        else if (item == assaultrifleCBox) checkedWeaponGroupList.Remove(WeaponGroup.AssaultRifle);
                        else if (item == sniperrifleCBox) checkedWeaponGroupList.Remove(WeaponGroup.Sniper);
                        else if (item == shotgunCBox) checkedWeaponGroupList.Remove(WeaponGroup.Shotgun);
                        else if (item == heavyweaponCBox) checkedWeaponGroupList.Remove(WeaponGroup.Heavy);
                        else if (item == throwablesCBox) checkedWeaponGroupList.Remove(WeaponGroup.Thrown);
                    }
                }

                // Remove any duplicates
                checkedWeaponGroupList = checkedWeaponGroupList.Distinct<WeaponGroup>().ToList();
            };
        }

        // Set ammo amount. Applies to checked weapons
        private static void setAmmoAmount(int amt)
        {
            // Iterate through every weapon
            foreach (WeaponHash weaponHash in Enum.GetValues(typeof(WeaponHash)))
            {
                // If player has weapon and weapon group is checked
                if (Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON, Game.Player.Character, weaponHash, false)
                    && checkedWeaponGroupList.Contains(Function.Call<WeaponGroup>(Hash.GET_WEAPONTYPE_GROUP, weaponHash)))
                {
                    if (!equippedweaponCBox.Checked)
                        Function.Call(Hash.SET_PED_AMMO, Game.Player.Character, weaponHash, amt);
                    else
                        Function.Call(Hash.SET_PED_AMMO, Game.Player.Character, Function.Call<Hash>(Hash.GET_SELECTED_PED_WEAPON, Game.Player.Character), amt);
                }
            }
        }
    }
}